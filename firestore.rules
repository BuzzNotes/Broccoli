rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admins can read all user data (you can add admin validation later)
      // allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      
      // Validate user data on create
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.email is string;
      
      // Validate user data on update
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && (
          // All these fields must be valid types if they exist
          (!('email' in request.resource.data) || request.resource.data.email is string)
          && (!('firstName' in request.resource.data) || request.resource.data.firstName is string)
          && (!('lastName' in request.resource.data) || request.resource.data.lastName is string)
          && (!('displayName' in request.resource.data) || request.resource.data.displayName is string)
          && (!('photoURL' in request.resource.data) || request.resource.data.photoURL is string)
          && (!('signUpDate' in request.resource.data) || request.resource.data.signUpDate is timestamp)
          && (!('lastLogin' in request.resource.data) || request.resource.data.lastLogin is timestamp)
          && (!('lastUpdated' in request.resource.data) || request.resource.data.lastUpdated is timestamp)
        );
        
      // Nested collections
      match /private/{document=**} {
        // Only the user can access their private data
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Future rules for other collections can be added here
  }
} 